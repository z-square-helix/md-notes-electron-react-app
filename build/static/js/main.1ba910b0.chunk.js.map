{"version":3,"sources":["App.js","serviceWorker.js","index.js","Logo.png"],"names":["ipcRenderer","window","require","settings","fs","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loadedFile","filesData","activeIndex","newEntry","newEntryName","directory","get","loadAndReadFiles","readdir","err","files","filter","file","includes","map","date","substr","indexOf","path","concat","title","sort","a","b","aDate","Date","bDate","aSec","getTime","setState","loadFile","changeFile","index","saveFile","content","readFileSync","toString","_this$state","writeFile","console","log","newFile","e","preventDefault","_this$state2","fileDate","dateFns","format","filePath","unshift","on","event","set","_this2","_this$state3","react_default","createElement","className","Header","src","logo","alt","Split","AppWrap","FilesWindow","Button","onClick","onSubmit","value","onChange","target","autoFocus","type","FileButton","active","CodeWindow","lib_default","mode","theme","newContent","name","RenderedWindow","esm","LoadingMessage","Component","styled","div","_templateObject","header","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","button","_templateObject8","_ref","_templateObject9","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1ba910b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport AceEditor from 'react-ace';\nimport styled from 'styled-components';\nimport dateFns from 'date-fns';\nimport brace from 'brace';\nimport 'brace/mode/markdown';\nimport 'brace/theme/dracula';\nimport logo from './Logo.png';\nimport './App.css';\n\nconst { ipcRenderer } = window.require('electron');\nconst settings = window.require('electron-settings');\nconst fs = window.require('fs');\nconst formatDate = date => dateFns.format(new Date(date), 'MMMM Do YYYY');\n\nclass App extends Component {\n    state = {\n        loadedFile: '',\n        filesData: [],\n        activeIndex: 0,\n        newEntry: false,\n        newEntryName: '',\n        directory: settings.get('directory') || null,\n    };\n\n    constructor() {\n        super();\n\n        const directory = settings.get('directory');\n        if (directory) {\n            this.loadAndReadFiles(directory);\n        }\n\n        ipcRenderer.on('save-file', event => {\n            this.saveFile();\n        });\n\n        ipcRenderer.on('new-dir', (event, directory) => {\n            this.setState({\n                directory,\n            });\n            settings.set('directory', directory);\n            this.loadAndReadFiles(directory);\n        });\n    }\n\n  loadAndReadFiles = directory => {\n  (\n\n      fs.readdir(directory, (err, files) => {\n          const filteredFiles = files.filter(file => file.includes('.md'));\n          const filesData = filteredFiles.map(file => {\n              const date = file.substr(\n                  file.indexOf('_') + 1,\n                  file.indexOf('.') - file.indexOf('_') - 1,\n              );\n              return {\n                date,\n                path: `${directory}/${file}`,\n                title: file.substr(0, file.indexOf('_')),\n            };\n          });\n\n          filesData.sort((a, b) => {\n              const aDate = new Date(a.date);\n              const bDate = new Date(b.date);\n              const aSec = aDate.getTime();\n              const bSec = bDate.getTime();\n              return bSec - aSec;\n          });\n\n          this.setState({\n              filesData,\n          },\n          () => this.loadFile(0));\n      })\n  );\n};\n\n  changeFile = index => () => {\n      const { activeIndex } = this.state;\n      if (index !== activeIndex) {\n          this.saveFile();\n          this.loadFile(index);\n      }\n  };\n\n  loadFile = index => {\n      const { filesData } = this.state;\n\n      const content = fs.readFileSync(filesData[index].path).toString();\n\n      this.setState({\n          loadedFile: content,\n          activeIndex: index,\n      });\n  };\n\n  saveFile = () => {\n      const { activeIndex, loadedFile, filesData } = this.state;\n      fs.writeFile(filesData[activeIndex].path, loadedFile, err => {\n          if (err) return console.log(err);\n      });\n  };\n\n  newFile = e => {\n      e.preventDefault();\n      const { newEntryName, directory, filesData } = this.state;\n      const fileDate = dateFns.format(new Date(), 'MM-DD-YYYY');\n      const filePath = `${directory}/${newEntryName}_${fileDate}.md`;\n      fs.writeFile(filePath, '', err => {\n          if (err) return console.log(err);\n\n          filesData.unshift({\n              path: filePath,\n              date: fileDate,\n              title: newEntryName,\n          });\n\n          this.setState({\n              newEntry: false,\n              newEntryName: '',\n              loadedFile: '',\n              filesData,\n          });\n      });\n  };\n\n  render() {\n    const {\n        activeIndex, filesData, directory, loadedFile, newEntry, newEntryName,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Header>DOPE NOTES</Header>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        {directory ? (\n          <Split>\n            <AppWrap>\n              <FilesWindow>\n              <Button\n                onClick={() => this.setState({newEntry: !newEntry})}\n              >\n              + New File\n              </Button>\n              {newEntry && (\n                <form onSubmit={this.newFile}>\n                    <input\n                      value={newEntryName}\n                      onChange={e =>\n                        this.setState({ newEntryName: e.target.value })\n                      }\n                      autoFocus\n                      type=\"text\"\n                    />\n                </form>\n            )}\n                {filesData.map((file, index) => (\n                      <FileButton\n                        active={activeIndex === index}\n                        onClick={this.changeFile(index)}\n                      >\n                        <p className=\"title\">{file.title}</p>\n                        <p className=\"date\">{formatDate(file.date)}</p>\n                      </FileButton>\n                ))}\n              </FilesWindow>\n            </AppWrap>\n            <CodeWindow>\n              <AceEditor\n                mode=\"markdown\"\n                theme=\"dracula\"\n                onChange={(newContent) => {\n                    this.setState({\n                        loadedFile: newContent,\n                    });\n                }}\n                name=\"markdown_editor\"\n                value={loadedFile}\n              />\n            </CodeWindow>\n            <RenderedWindow>\n              <Markdown>{loadedFile}</Markdown>\n            </RenderedWindow>\n          </Split>\n      ) : (\n          <LoadingMessage>\n            <h1> Press Cmd + O to open directory </h1>\n          </LoadingMessage>\n    )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst AppWrap = styled.div`\n    width: 200px;\n    position: relative;\n    background: #c2cad0;\n`;\n\nconst Header = styled.header`\n    background-color: #3d344b;\n    color: #f4f2f3;\n    font-size: 0.8rem;\n    font-weight: bold;\n    height: 23px;\n    text-align: center;\n    position: fixed;\n    box-shadow: 0px 3px 3px rgba(0,0,0,0.2);\n    top: 0;\n    left: 0;\n    width: 100%;\n    z-index: 10;\n    -webkit-app-region: drag;\n`;\n\nconst LoadingMessage = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #f4f2f3;\n    background: #3d344b;\n    height: 100vh;\n`;\n\nconst Split = styled.div`\n    display: flex;\n    height: 100vh;\n`;\n\nconst RenderedWindow = styled.div`\n    background-color: #c2cad0;\n    width: 35%;\n    padding: 20px;\n    color: #3d344b;\n    border-left: 1px solid #1d1f21;\n    h1, h2, h3, h4, h5, h6 {\n        color: #f51752;\n    }\n    h1 {\n        border-bottom: solid 3px #f51752;\n        padding-bottom: 10px;\n    }\n    a {\n        color: #66fcf1;\n    }\n`;\n\nconst FilesWindow = styled.div`\n    background: #c2cad0;\n    border-right: solid 1px #1d1f21;\n    position: relative;\n    width: 100%;\n    &:after {\n        content: '';\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        pointer-events: none;\n        box-shadow: -10px 0 20px rgba(0, 0, 0, 0.3) inset;\n    }\n`;\n\nconst CodeWindow = styled.div`\n    flex: 1;\n`;\n\nconst FileButton = styled.button`\n    appearance: none;\n    padding: 10px;\n    width: 100%;\n    background: #1f2833;\n    text-align: left;\n    opacity: 0.4;\n    color: #66fcf1;\n    border: none;\n    border-bottom: solid 1px #bea6ff;\n    transition: 0.3s ease all;\n    &:hover {\n        opacity: 1;\n        border-left: solid 4px #3d344b;\n    }\n    ${({ active }) => active && `\n        opacity: 1;\n        border-left: solid 4px #3d344b;\n    `};\n    .title {\n        font-weight: bold;\n        font-size: 0.9rem;\n        margin: 0 0 5px;\n    }\n    .date {\n        margin: 0;\n    }\n`;\n\nconst Button = styled.button`\n    background: transparent;\n    color: #1f2833;\n    display: block;\n    border: solid 1px #66fcf1;\n    border-radius: 4px;\n    margin: 1rem auto;\n    font-size: 1rem;\n    transition: 0.3s ease all;\n    padding: 5px 10px;\n    &:hover {\n        background: #66fcf1;\n        color: #3d344b;\n    }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.356c978e.png\";"],"sourceRoot":""}